#one dimensional frequenecy tables
attach(mtcars)
table(am)
#two dimensional frequenecy tables
#ftable function displays data in a more compact way
ftable(am,vs) #or table(vs,am)
table(vs,am)
#contingency tabes for three or more variables
table(gear,am,vs)
addmargins(table(gear,vs,am))
addmargins(table(gear,vs,am),margin=3)
xtabs(mpg~vs+am,mtcars)
cor(Orange$age,Orange$circumference)
cor.test(Orange$age,Orange$circumference)
cor(Orange$age,Orange$circumference)
attach(iris)
iris
boxplot(Sepal.Length)
boxplot(Sepal.Length,horizontal = T)
boxplot(Sepal.Length,horizontal = T,main="Simple Boxplot")
boxplot(Sepal.Length~Species,horizontal = T,main="Simple Boxplot")
boxplot(Sepal.Length~Species,horizontal = T,main="Boxplot grouped by Species")
boxplot(Sepal.Length~Species,horizontal = T,main="Boxplot grouped by Species",col=c('green','yellow','orange'))
boxplot(Sepal.Length,horizontal = T,main="Simple Boxplot")
boxplot(Sepal.Length,horizontal = T,main="Simple Boxplot", xlab="Sepal Length")
boxplot(Sepal.Length,horizontal = T,main="Simple Boxplot", xlab="Sepal Length")
boxplot(Sepal.Length~Species,horizontal = T,main="Boxplot grouped by Species",
col=c('green','yellow','orange'))
boxplot(Sepal.Length,horizontal = T,main="Simple Boxplot")
boxplot(Sepal.Length~Species,horizontal = T,main="Boxplot grouped by Species",
col=c('green','yellow','orange'))
boxplot(Sepal.Length,horizontal = T,main="Simple Boxplot",xlab="Sepal Length")
median(Sepal.Length)
boxplot(Sepal.Length~Species,horizontal = T,main="Boxplot grouped by Species",
col=c('green','yellow','orange'))
median(Sepal.Length~Speciee)
median(Sepal.Length~Species)
median(Sepal.Length~Species)
a=Sepal.Length~Species
median(a)
a
x=0:10
x
y=dbinom(x,10,0.16)
y=dbinom(x,10,0.16)
y
plot(x,dbinom(x,10,0.16),type='h',xlab="",ylab="Probability",sub="Number of kids with blue eyes")
data.frame("Probability"=y,row.names=x)
plot(x,dbinom(x,10,0.16),type='h',xlab="",ylab="Probability",sub="Number of kids with blue eyes")
plot(x,dbinom(x,10,0.16),type='h',xlab="No. of kids with blue eyes",ylab="Probability",sub="Number of kids with blue eyes")
plot(x,dbinom(x,10,0.16),type='h',ylab="Probability",sub="Number of kids with blue eyes")
plot(x,dbinom(x,10,0.16),type='h',main="No. of kids with blue eyes",ylab="Probability",sub="Number of kids with blue eyes")
plot(x,dbinom(x,10,0.16),type='h',main="No. of kids with blue eyes",ylab="Probability")
plot(x,dbinom(x,10,0.16),type='l',main="No. of kids with blue eyes",ylab="Probability")
plot(x,dbinom(x,10,0.16),type='l',main="No. of kids with blue eyes")
,ylab="Probability"
plot(x,dbinom(x,10,0.16),type='l',main="No. of kids with blue eyes",ylab="Probability")
par(mfrow=c(2,2))
plot(x,pbinom(x,10,0.05),type='s',xlab="",ylab="Probability",sub="p=0.05")
plot(x,pbinom(x,10,0.2),type='s',xlab="",ylab="Probability",sub="p=0.2")
plot(x,pbinom(x,10,0.5),type='s',xlab="",ylab="Probability",sub="p=0.5")
plot(x,pbinom(x,10,0.8),type='s',xlab="",ylab="Probability",sub="p=0.8")
plot(x,pbinom(x,10,0.05),type='l',xlab="",ylab="Probability",sub="p=0.05")
plot(x,pbinom(x,10,0.2),type='l',xlab="",ylab="Probability",sub="p=0.2")
plot(x,pbinom(x,10,0.5),type='l',xlab="",ylab="Probability",sub="p=0.5")
plot(x,pbinom(x,10,0.8),type='l',xlab="",ylab="Probability",sub="p=0.8")
plot(x,pbinom(x,10,0.1),type='l',xlab="",ylab="Probability",sub="p=0.05")
plot(x,pbinom(x,10,0.2),type='l',xlab="",ylab="Probability",sub="p=0.2")
plot(x,pbinom(x,10,0.5),type='l',xlab="",ylab="Probability",sub="p=0.5")
plot(x,pbinom(x,10,0.8),type='l',xlab="",ylab="Probability",sub="p=0.8")
plot(x,pbinom(x,10,0.75),type='l',xlab="",ylab="Probability",sub="p=0.8")
par(mfrow=c(2,2))
plot(x,pbinom(x,10,0.1),type='l',xlab="",ylab="Probability",sub="p=0.05")
plot(x,pbinom(x,10,0.2),type='l',xlab="",ylab="Probability",sub="p=0.2")
plot(x,pbinom(x,10,0.5),type='l',xlab="",ylab="Probability",sub="p=0.5")
plot(x,pbinom(x,10,0.75),type='l',xlab="",ylab="Probability",sub="p=0.8")
par(mfrow=c(2,2))
plot(x,dbinom(x,10,0.1),type='l',xlab="",ylab="Probability",sub="p=0.05")
plot(x,dbinom(x,10,0.2),type='l',xlab="",ylab="Probability",sub="p=0.2")
plot(x,dbinom(x,10,0.5),type='l',xlab="",ylab="Probability",sub="p=0.5")
plot(x,dbinom(x,10,0.75),type='l',xlab="",ylab="Probability",sub="p=0.8")
plot(x,dbinom(x,10,0.1),type='l',xlab="",ylab="Probability",sub="p=0.05")
plot(x,dbinom(x,10,0.2),type='l',xlab="",ylab="Probability",sub="p=0.2")
plot(x,dbinom(x,10,0.5),type='l',xlab="",ylab="Probability",sub="p=0.5")
plot(x,dbinom(x,10,0.1),type='l',xlab="",ylab="Probability",sub="p=0.1")
plot(x,dbinom(x,10,0.25),type='l',xlab="",ylab="Probability",sub="p=0.25")
plot(x,dbinom(x,10,0.5),type='l',xlab="",ylab="Probability",sub="p=0.5")
plot(x,dbinom(x,10,0.75),type='l',xlab="",ylab="Probability",sub="p=0.74")
plot(x,dbinom(x,10,0.75),type='l',xlab="",ylab="Probability",sub="p=0.74")
plot(x,dbinom(x,10,0.1),type='l',xlab="",ylab="Probability",sub="p=0.1")
plot(x,dbinom(x,10,0.25),type='l',xlab="",ylab="Probability",sub="p=0.25")
plot(x,dbinom(x,10,0.5),type='l',xlab="",ylab="Probability",sub="p=0.5")
plot(x,dbinom(x,10,0.75),type='l',xlab="",ylab="Probability",sub="p=0.75")
IQ_Values=c(134,136,137,138,143,144,144,146,146,146,147,153)
IQ_Values
mean(IQ_Values)
sd(IQ_Values)
a=mean(IQ_Values)
b=sd(IQ_Values)
qqnorm(IQ_Values,a,b)
dnorm(IQ_Values,a,b)
plot(IQ_Values,y,type='l',xlab="x",ylab="f(x)",main="Normal")
plot(IQ_Values,y,type='l')
IQ_Values
y
y=dnorm(IQ_Values,a,b)
y
plot(IQ_Values,y,type='l')
par(mfrow=c(1,1))
par(mfrow=c(1,1))
plot(IQ_Values,y,type='l')
hist(IQ_Values)
plot(x,dbinom(x,10,0.16),type='l',main="No. of kids with blue eyes",ylab="Probability")
attach(mtcars)
model1=lm(mpg~disp+cyl+hp+drat+wt+qsec+carb)
model1
summary(model1)
confint(model1)
fitted(model1)
residuals(model1)
anova(model1)
par(mfrow=c(2,2))
plot(model1)
shiny::runApp('Stock_Market')
runApp('Stock_Market')
runApp('C:/Users/KARAN/Downloads/Stock-Market-Interface-R-master/Stock-Market-Interface-R-master/main.R')
runApp('Stock_Market')
runApp('Stock_Market')
runApp('Stock_Market')
runApp('Stock_Market')
runApp('Stock_Market')
runApp('Stock_Market')
runApp('Stock_Market')
runApp('Stock_Market')
runApp('Stock_Market')
runApp('Stock_Market')
runApp('Stock_Market')
runApp('Stock_Market')
runApp('Stock_Market')
runApp('Stock_Market')
runApp('Stock_Market')
runApp('Stock_Market')
runApp('Stock_Market')
runApp('Stock_Market')
runApp('Stock_Market')
runApp('Stock_Market')
runApp('Stock_Market')
runApp('Stock_Market')
runApp('Stock_Market')
runApp('Stock_Market')
# Use 'rtsdata' to obtain data from yahoo finances using the Symbol from the company selected in the interface
data <- ds.getSymbol.yahoo(CompanySymbol[input$Company], from = start, to = end)
shiny::runApp('Stock_Market')
variablesSelected
tableInfo
dataAux
date
value
shiny::runApp('Stock_Market')
runApp('Stock_Market')
Q
runApp('Stock_Market')
runApp('Stock_Market')
runApp('Stock_Market')
10+20
webpage <- read_html("https://en.m.wikipedia.org/wiki/List_of_most_visited_palaces_and_monuments") %>%
html_nodes(".wikitable sortable jquery-tablesorter") %>%
html_text()
library(xml2)
library(rvest)
library(stringr)
webpage <- read_html("https://en.m.wikipedia.org/wiki/List_of_most_visited_palaces_and_monuments") %>%
html_nodes(".wikitable sortable jquery-tablesorter") %>%
html_text()
webpage
webpage <- read_html("https://finance.yahoo.com/quote/INTC.BA/profile?p=INTC.BA") %>%
html_nodes(".quote-sub-section") %>%
html_text()
webpage
webpage <- read_html("https://en.m.wikipedia.org/wiki/List_of_most_visited_palaces_and_monuments") %>%
html_nodes(".wikitable sortable jquery-tablesorter") %>%
html_text()
webpage
webpage
webpage <- read_html("https://en.m.wikipedia.org/wiki/List_of_most_visited_palaces_and_monuments") %>%
html_nodes(".wikitable sortable jquery-tablesorter") %>%
html_table()
webpage
webpage <- read_html("https://www.architecturaldigest.com/story/most-iconic-buildings-around-the-world") %>%
html_nodes(".body__inner-container") %>%
html_table()
webpage
webpage <- read_html("https://www.architecturaldigest.com/story/most-iconic-buildings-around-the-world") %>%
html_nodes(".body__inner-container") %>%
html_table()
webpage
webpage <- read_html("https://www.architecturaldigest.com/story/most-iconic-buildings-around-the-world") %>%
html_nodes(".body__inner-container") %>%
html_text()
webpage
runApp('Stock_Market')
runApp('Stock_Market')
runApp('Stock_Market')
runApp('Stock_Market')
runApp('Stock_Market')
shiny::runApp('Stock_Market')
attach(mtcars)
model1=lm(mpg~disp+cyl+hp+drat+wt+qsec+carb)
model1
summary(model1)
confint(model1)
fitted(model1)
residuals(model1)
anova(model1)
par(mfrow=c(2,2))
plot(model1)
plot(model1)
plot(model1)
plot(model1)
vif(model1)
install.packages("HH")
vif(model1)
install.packages("car")
vif(model1)
library(car)
vif(model1)
sqrt(vif(model1))
summary(model1)
residuals(model1)
par(mfrow=c(1,1))
attach(CO2)
t.test(uptake, mu=30)
CO2
#Ho: mean is 30
#H1: mean is not equal to 30
t.test(uptake, mu=30,alternative = 'less', conf.level = 0.95)
t.test(uptake~Type, mu=0, alt = 'two-tailed', conf.level = 0.95, paired=FALSE)
t.test(uptake~Type, mu=0, alternative = 'two-tailed', conf.level = 0.95, paired=FALSE)
t.test(uptake~Type, mu=0, alternative = 'two.sided', conf.level = 0.95, paired=FALSE)
t.test(uptake~Type, mu=0, conf.level = 0.95, paired=FALSE)
t.test(uptake~Type, mu=0, conf.level = 0.95, paired=FALSE, var.equal = FALSE)
t.test(uptake~Treatment, mu=0, conf.level = 0.95, paired=TRUE) #Variance by default 0
webpage <- read_html("https://finance.yahoo.com/quote/INTC.BA/profile?p=INTC.BA") %>%
html_nodes(".quote-sub-section") %>%
html_text()
webpage <- read_html("https://finance.yahoo.com/quote/INTC.BA/profile?p=INTC.BA") %>%
html_nodes(".quote-sub-section") %>%
html_text()
library(rvest)
library(stringr)
webpage <- read_html("https://finance.yahoo.com/quote/INTC.BA/profile?p=INTC.BA") %>%
html_nodes(".quote-sub-section") %>%
html_text()
webpage
library(shiny); runApp('C:/Users/KARAN/Downloads/Stats Project/Senior/Application/final1.R')
runApp('Stock_Market')
df<-tq_get(CompanySymbol[input$Company] ,get = "stock.prices", from = "2010-01-01")
attach(mtcars)
model1=lm(mpg~disp+cyl+hp+drat+wt+qsec+carb)
model1
summary(model1)
confint(model1)
fitted(model1)
residuals(model1)
anova(model1)
par(mfrow=c(2,2))
plot(model1)
install.packages("car")
library(car)
vif(model1)
sqrt(vif(model1))
attach(CO2)
#Ho: mean is 30
#H1: mean is not equal to 30
t.test(uptake, mu=30)
#Ho: mean is 30
#H1: mean is less than 30
t.test(uptake, mu=30,alternative = 'less', conf.level = 0.95)
t.test(uptake~Type, mu=0, conf.level = 0.95, paired=FALSE) #Variance by default 0
t.test(uptake~Treatment, mu=0, conf.level = 0.95, paired=TRUE) #Variance by default 0
shiny::runApp('Stock_Market')
library(shiny); runApp('C:/Users/KARAN/Downloads/Stock_app.R')
runApp('C:/Users/KARAN/Downloads/Stock_app.R')
runApp('Stock_Market')
shiny::runApp('Stock_Market')
runApp('C:/Users/KARAN/Downloads/Stock_app.R')
runApp('C:/Users/KARAN/Downloads/Stock_app.R')
runApp('Stock_Market')
df<-tq_get("TCS.NS" ,get = "stock.prices", from = "2010-01-01")
pi<-auto.arima(df$close, lambda = "auto")
q<- forecast(pi, h=1000)
x=seq(as.Date(Sys.Date()+1),as.Date(Sys.Date()+(1000)),by=1)
Date=as.character(x)
a=data.frame(Date,q)
colnames(a)=c('Date','Point Forecast','Low(80)','High(80)','Low(95)','High(95)')
print(a)
pi<-auto.arima(df$close, lambda = "auto", ic='bic')
q<- forecast(pi, h=1000)
x=seq(as.Date(Sys.Date()+1),as.Date(Sys.Date()+(1000)),by=1)
Date=as.character(x)
a=data.frame(Date,q)
colnames(a)=c('Date','Point Forecast','Low(80)','High(80)','Low(95)','High(95)')
print(a)
pi<-auto.arima(df$close, lambda = "auto", ic='aic')
q<- forecast(pi, h=1000)
x=seq(as.Date(Sys.Date()+1),as.Date(Sys.Date()+(1000)),by=1)
Date=as.character(x)
a=data.frame(Date,q)
colnames(a)=c('Date','Point Forecast','Low(80)','High(80)','Low(95)','High(95)')
print(a)
pi<-auto.arima(df$close, lambda = "auto", ic='aaic')
pi<-auto.arima(df$close, lambda = "auto", ic='aicc')
q<- forecast(pi, h=1000)
x=seq(as.Date(Sys.Date()+1),as.Date(Sys.Date()+(1000)),by=1)
Date=as.character(x)
a=data.frame(Date,q)
colnames(a)=c('Date','Point Forecast','Low(80)','High(80)','Low(95)','High(95)')
print(a)
df<-tq_get("TCS.NS" ,get = "stock.prices", from = "2010-01-01")
pi<-auto.arima(df$close, lambda = "auto")
q<- forecast(pi, h=1000)
x=seq(as.Date(Sys.Date()+1),as.Date(Sys.Date()+(1000)),by=1)
Date=as.character(x)
a=data.frame(Date,q)
colnames(a)=c('Date','Point Forecast','Low(80)','High(80)','Low(95)','High(95)')
print(a)
pi<-auto.arima(df$close, ic='bic')
q<- forecast(pi, h=1000)
x=seq(as.Date(Sys.Date()+1),as.Date(Sys.Date()+(1000)),by=1)
Date=as.character(x)
a=data.frame(Date,q)
colnames(a)=c('Date','Point Forecast','Low(80)','High(80)','Low(95)','High(95)')
print(a)
print(tail(a))
pi<-auto.arima(df$close, ic='aic')
q<- forecast(pi, h=1000)
x=seq(as.Date(Sys.Date()+1),as.Date(Sys.Date()+(1000)),by=1)
Date=as.character(x)
a=data.frame(Date,q)
colnames(a)=c('Date','Point Forecast','Low(80)','High(80)','Low(95)','High(95)')
print(tail(a))
pi<-auto.arima(df$close, ic='aicc')
q<- forecast(pi, h=1000)
x=seq(as.Date(Sys.Date()+1),as.Date(Sys.Date()+(1000)),by=1)
Date=as.character(x)
a=data.frame(Date,q)
colnames(a)=c('Date','Point Forecast','Low(80)','High(80)','Low(95)','High(95)')
print(tail(a))
#Dividing the data into train and test, applying the model
N = length(df$close)
n = 0.7*N
train = df$close[1:n, ]
forecast
q
#Dividing the data into train and test, applying the model
N = length(df$close)
N
n = 0.7*N
n
train = df$close[1:n, ]
train = df$close[1:n,]
train = df$close[1:n]
train
test  = df$close[(n+1):N,  ]
test  = df$close[(n+1):N]
trainarimafit <- auto.arima(train, lambda = "auto")
trainarimafit
predlen=length(test)
trainarimafit <- forecast(trainarimafit, h=predlen)
#Plotting mean predicted values vs real data
meanvalues <- as.vector(trainarimafit$mean)
precios <- as.vector(test$(df$close))
precios <- as.vector(test$df$close)
b=df$close
precios <- as.vector(test$b)
meanvalues
test
precios <- as.vector(test)
plot(meanvalues, type= "l", col= "red")
lines(precios, type = "l")
lines(precios, type = "l")
df<-tq_get("TCS.NS" ,get = "stock.prices", from = "2010-01-01")
auto_arima<-auto.arima(df$close, lambda = "auto")
auto_arima
autoplot(forecast(auto_arima ,input$slider1))+theme_minimal()
autoplot(forecast(auto_arima ,100)+theme_minimal()
#Dividing the data into train and test, applying the model
N = length(df$close)
autoplot(forecast(auto_arima ,100)+theme_minimal()
#Dividing the data into train and test, applying the model
N = length(df$close)
autoplot(forecast(auto_arima ,100)+theme_minimal()
})
autoplot(forecast(auto_arima ,100)+theme_minimal())
autoplot(forecast(auto_arima ,100))+theme_minimal()
#Dividing the data into train and test, applying the model
N = length(df$close)
n = 1*N
train = df$close[1:n]
test  = df$close[(n+1):N]
trainarimafit <- auto.arima(train, lambda = "auto")
predlen=length(test)
trainarimafit <- forecast(trainarimafit, h=predlen)
#Plotting mean predicted values vs real data
meanvalues <- as.vector(trainarimafit$mean)
lines(meanvalues, type = "l", col= "red")
plot(forecast(auto_arima ,100))
lines(meanvalues, type = "l", col= "red")
a=forecast(auto_arima ,100)
plot(a,type='l')
lines(meanvalues, type = "l", col= "red")
plot(meanvalues, type= "l", col= "red")
lines(precios, type = "l")
lines(precios, type = "l")
plot(meanvalues, type= "l", col= "red")
lines(precios, type = "l")
#Dividing the data into train and test, applying the model
N = length(df$close)
n = 1*N
train = df$close[1:n]
test  = df$close[(n+1):N]
trainarimafit <- auto.arima(train, lambda = "auto")
predlen=length(test)
trainarimafit <- forecast(trainarimafit, h=predlen)
#Plotting mean predicted values vs real data
meanvalues <- as.vector(trainarimafit$mean)
precios <- as.vector(test)
plot(meanvalues, type= "l", col= "red")
lines(precios, type = "l")
#Dividing the data into train and test, applying the model
N = length(df$close)
N
n = 1*N
train = df$close[1:n]
test  = df$close[(n+1):N]
trainarimafit <- auto.arima(train, lambda = "auto")
predlen=length(test)
trainarimafit <- forecast(trainarimafit, h=predlen)
trainarimafit
#Dividing the data into train and test, applying the model
N = length(df$close)
n = 0.7*N
train = df$close[1:n]
test  = df$close[(n+1):N]
trainarimafit <- auto.arima(train, lambda = "auto")
predlen=length(test)
trainarimafit <- forecast(trainarimafit, h=predlen)
#Plotting mean predicted values vs real data
meanvalues <- as.vector(trainarimafit$mean)
precios <- as.vector(test)
plot(meanvalues, type= "l", col= "red")
lines(precios, type = "l")
df<-tq_get("TCS.NS" ,get = "stock.prices", from = "2010-01-01")
auto_arima<-auto.arima(df$close, lambda = "auto")
a=forecast(auto_arima ,100)
plot(a,type='l')
lines(meanvalues, type = "l", col= "red")
a
a$Point.Forecast=a[,1]
a$Point.Forecast=a[1,]
a$Point.Forecast=a[,0]
#Dividing the data into train and test, applying the model
N = length(df$close)
n = 1*N
n = 1*N
train = df$close[1:n]
train
test  = df$close[1:N]
trainarimafit <- auto.arima(train, lambda = "auto")
trainarimafit
predlen=length(test)
trainarimafit <- forecast(trainarimafit, h=predlen)
#Plotting mean predicted values vs real data
meanvalues <- as.vector(trainarimafit$mean)
lines(meanvalues, type = "l", col= "red")
runApp('Stock_Market')
runApp('Stock_Market')
shiny::runApp('Stock_Market')
runApp('C:/Users/KARAN/Downloads/Stock_Market/Stock_Market')
runApp('Stock_Market')
runApp('Stock_Market')
shiny::runApp('Stock_Market')
runApp('Stock_Market')
runApp('Stock_Market')
runApp('Stock_Market')
runApp('Stock_Market')
library(shiny); runApp('C:/Users/KARAN/Downloads/Stats Project/Senior/Application/final1.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp('C:/Users/KARAN/Downloads/Stock_app.R')
runApp('C:/Users/KARAN/Downloads/Stock_app.R')
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
